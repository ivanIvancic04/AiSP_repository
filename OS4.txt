1.

KREIRANJE:
nano ime_programa.c

KOD:
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        perror("fork error");
        return 1;
    } else if (pid == 0) {
        printf("Dijete proces: PID=%d, PPID=%d\n", getpid(), getppid());
    } else {
        printf("Roditelj proces: PID=%d, Dijete PID=%d\n", getpid(), pid);
    }

    return 0;
}

KOMPAJLIRANJE:
gcc ime_programa.c -o ime_programa

POZIV:
./ime_programa

2.

KREIRANJE:
nano ime_programa.c

KOD:
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork(); // Stvaranje procesa dijete

    if (pid < 0) {
        // Ako je došlo do greške pri stvaranju procesa
        perror("fork error");
        return 1;
    } 
    else if (pid == 0) {
        // Proces dijete
        printf("Dijete proces (PID=%d) pokreće naredbu za ispis procesa...\n", getpid());
        
        // Pokretanje naredbe ljuske "ps -ef" koristeći execl()
        execl("/bin/ps", "ps", "-ef", (char *)NULL);

        // Ako execl() ne uspije
        perror("execl error");
        exit(1);
    } 
    else {
        // Roditeljski proces
        printf("Roditelj proces (PID=%d) čeka završetak djeteta (PID=%d)...\n", getpid(), pid);

        // Čekanje na završetak djetetovog procesa
        int status;
        wait(&status);

        if (WIFEXITED(status)) {
            printf("Dijete proces završio s izlaznim statusom: %d\n", WEXITSTATUS(status));
        } else {
            printf("Dijete proces nije ispravno završio.\n");
        }
    }

    return 0;
}

KOMPAJLIRANJE:
gcc ime_programa.c -o ime_programa

POZIV:
./ime_programa

3. 

KREIRANJE:
nano ime_programa.c

KOD:
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>

int main() {
    int broj;
    printf("Unesite broj u rasponu [1,10000]: ");
    scanf("%d", &broj);

    // Provjera unosa
    if (broj < 1 || broj > 10000) {
        printf("Pogrešan unos! Broj mora biti u rasponu [1,10000].\n");
        return 1;
    }

    // Niz za spremanje znamenki
    char niz[6] = {0}; // Maksimalno 5 znamenki + null terminator

    pid_t pid = fork(); // Stvaranje procesa dijete

    if (pid < 0) {
        // Ako fork() nije uspio
        perror("fork error");
        return 1;
    } 
    else if (pid == 0) {
        // Proces dijete
        printf("Dijete proces (PID=%d) rastavlja broj na znamenke...\n", getpid());

        int temp = broj;
        int i = 0;
        while (temp > 0) {
            niz[i++] = (temp % 10) + '0'; // Dodavanje znamenke u niz kao znak
            temp /= 10;
        }

        // Preokretanje niza jer su znamenke unesene obrnutim redoslijedom
        for (int j = 0; j < i / 2; j++) {
            char tmp = niz[j];
            niz[j] = niz[i - j - 1];
            niz[i - j - 1] = tmp;
        }

        printf("Dijete proces generirani niz: %s\n", niz);
    } 
    else {
        // Roditeljski proces
        printf("Roditelj proces (PID=%d) čeka završetak djeteta...\n", getpid());
        
        // Čekanje završetka djetetovog procesa
        wait(NULL);

        // Roditelj također ispisuje generirani niz
        printf("Roditelj proces generirani niz: %s\n", niz);
    }

    return 0;
}

KOMPAJLIRANJE:
gcc ime_programa.c -o ime_programa

POZIV:
./ime_programa

4.

KREIRANJE:
nano ime_programa.c

KOD:
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/mman.h>
#include <sys/wait.h>
#include <string.h>

int main() {
    int broj;
    printf("Unesite broj u rasponu [1,10000]: ");
    scanf("%d", &broj);

    // Provjera unosa
    if (broj < 1 || broj > 10000) {
        printf("Pogrešan unos! Broj mora biti u rasponu [1,10000].\n");
        return 1;
    }

    // Kreiranje dijeljene memorije za niz
    char *shared_memory = mmap(NULL, 6, PROT_READ | PROT_WRITE,
                               MAP_SHARED | MAP_ANONYMOUS, -1, 0);
    if (shared_memory == MAP_FAILED) {
        perror("mmap error");
        return 1;
    }

    pid_t pid = fork(); // Stvaranje procesa dijete

    if (pid < 0) {
        // Ako fork() nije uspio
        perror("fork error");
        return 1;
    } 
    else if (pid == 0) {
        // Proces dijete
        printf("Dijete proces (PID=%d) rastavlja broj na znamenke...\n", getpid());

        int temp = broj;
        int i = 0;
        while (temp > 0) {
            shared_memory[i++] = (temp % 10) + '0'; // Dodavanje znamenke u niz kao znak
            temp /= 10;
        }
        shared_memory[i] = '\0'; // Završni znak

        // Preokretanje niza jer su znamenke unesene obrnutim redoslijedom
        for (int j = 0; j < i / 2; j++) {
            char tmp = shared_memory[j];
            shared_memory[j] = shared_memory[i - j - 1];
            shared_memory[i - j - 1] = tmp;
        }

        printf("Dijete proces zapisao niz u dijeljenu memoriju: %s\n", shared_memory);
    } 
    else {
        // Roditeljski proces
        printf("Roditelj proces (PID=%d) čeka završetak djeteta...\n", getpid());

        // Čekanje završetka djetetovog procesa
        wait(NULL);

        // Čitanje iz dijeljene memorije
        printf("Roditelj proces pročitao niz iz dijeljene memorije: %s\n", shared_memory);
    }

    // Oslobađanje dijeljene memorije
    munmap(shared_memory, 6);

    return 0;
}

KOMPAJLIRANJE:
gcc ime_programa.c -o ime_programa

POZIV:
./ime_programa

5.

KREIRANJE:
nano ime_programa.c

KOD:

KOMPAJLIRANJE:
gcc ime_programa.c -o ime_programa

POZIV:
./ime_programa

U DRUGOM TERMINALU
ODZV:
ps -ef | grep ime_programa

KILL_PROCES:
(-2 poruka, -15 ubija)
kill -2 <PID>

kill -15 <PID>



